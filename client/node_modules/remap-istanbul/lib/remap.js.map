{"version":3,"sources":["../src/remap.js"],"names":["remap","coverage","options","smc","Array","isArray","forEach","addCoverage","item","getFinalCoverage"],"mappings":";;;;;;;sBAyBwBA,K;;;;;;;;;;AAvBxB;;;;;;;;;;;;;;;;;;;;;;;AAuBe,aAASA,KAAT,CAAeC,QAAf,EAAuC;AAAA,UAAdC,OAAc,uEAAJ,EAAI;;AACrD,UAAMC,MAAM,kCAAwBD,OAAxB,CAAZ;;AAEA,UAAI,CAACE,MAAMC,OAAN,CAAcJ,QAAd,CAAL,EAA8B;AAC7BA,mBAAW,CAACA,QAAD,CAAX;AACA;;AAEDA,eAASK,OAAT,CAAiB,gBAAQ;AACxBH,YAAII,WAAJ,CAAgBC,IAAhB;AACA,OAFD;;AAIA,aAAOL,IAAIM,gBAAJ,EAAP;AACA","file":"remap.js","sourcesContent":["import CoverageTransformer from './CoverageTransformer';\n\n/**\n * Remaps coverage data based on the source maps it discovers in the\n * covered files and returns a coverage Collector that contains the remappped\n * data.\n * @param  {Array|Object} coverage The coverage (or array of coverages) that need to be\n *                                 remapped\n * @param  {Object} options A configuration object:\n *                              basePath?    - a string containing to utilise as the base path\n *                                             for determining the location of the source file\n *                              exclude?     - a string or Regular Expression that filters out\n *                                             any coverage where the file path matches\n *                              mapFileName? - a function that takes the remapped file name and\n *                                             and returns a string that should be the name in\n *                                             the final coverage\n *                              readFile?    - a function that can read a file\n *                                             syncronously\n *                              readJSON?    - a function that can read and parse a\n *                                             JSON file syncronously\n *                              sources?     - a Istanbul store where inline sources will be\n *                                             added\n *                              warn?        - a function that logs warnings\n * @return {istanbul/lib/_collector}           The remapped collector\n */\nexport default function remap(coverage, options = {}) {\n\tconst smc = new CoverageTransformer(options);\n\n\tif (!Array.isArray(coverage)) {\n\t\tcoverage = [coverage];\n\t}\n\n\tcoverage.forEach(item => {\n\t\tsmc.addCoverage(item);\n\t});\n\n\treturn smc.getFinalCoverage();\n}\n"]}