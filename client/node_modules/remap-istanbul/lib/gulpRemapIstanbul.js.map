{"version":3,"sources":["../src/gulpRemapIstanbul.js"],"names":["gulpPlugin","opts","obj","file","enc","cb","warn","message","fail","console","error","sources","isNull","isStream","collector","JSON","parse","contents","toString","thresholdCheckFailed","check","Object","keys","map","length","p","reports","forEach","key","push","reportOpts","Buffer","stringify","getFinalCoverage","Promise","all","then"],"mappings":";;;;;;;oBAWwBA,U;;;;;;;;;;;;;;;;;;AAFxB;;AATA;AACA;AAUe,WAASA,UAAT,GAA+B;AAAA,OAAXC,IAAW,uEAAJ,EAAI;;AAC7C,UAAO,sBAAQC,GAAR,CAAY,UAACC,IAAD,EAAOC,GAAP,EAAYC,EAAZ,EAAmB;AACrC,QAAI,CAACJ,KAAKK,IAAV,EAAgB;AACfL,UAAKK,IAAL,GAAY,UAACC,OAAD,EAAa;AACxB,UAAIN,KAAKO,IAAT,EAAe;AACdH,UAAG,8BAAgB,gBAAhB,EAAkCE,OAAlC,CAAH;AACA,OAFD,MAEO;AACNE,eAAQC,KAAR,CAAcH,OAAd;AACA;AACD,MAND;AAOA;;AAEDN,SAAKU,OAAL,GAAe,sBAAf;;AAEA,QAAIR,KAAKS,MAAL,EAAJ,EAAmB;AAClBP,QAAG,IAAH,EAASF,IAAT;AACA;;AAED,QAAIA,KAAKU,QAAL,EAAJ,EAAqB;AACpBR,QAAG,8BAAgB,gBAAhB,EAAkC,yBAAlC,CAAH;AACA;;AAED,QAAMS,YAAY,qBAAMC,KAAKC,KAAL,CAAWb,KAAKc,QAAL,CAAcC,QAAd,CAAuB,MAAvB,CAAX,CAAN,EAAkDjB,IAAlD,CAAlB;;AAEA,QAAIkB,uBAAuB,KAA3B;AACA,QAAIlB,KAAKmB,KAAT,EAAgB;AACfD,4BAAuB,8BAAelB,KAAKmB,KAApB,EAA2BN,SAA3B,CAAvB;AACA;;AAED,QAAIH,gBAAJ;AACA,QAAIU,OAAOC,IAAP,CAAYrB,KAAKU,OAAL,CAAaY,GAAzB,EAA8BC,MAAlC,EAA0C;AACzCb,eAAUV,KAAKU,OAAf;AACA;;AAED,QAAMc,IAAI,EAAV;AACA,QAAIxB,KAAKyB,OAAT,EAAkB;AACjBL,YAAOC,IAAP,CAAYrB,KAAKyB,OAAjB,EAA0BC,OAA1B,CAAkC,UAACC,GAAD,EAAS;AAC1CH,QAAEI,IAAF,CAAO,2BAAYf,SAAZ,EAAuBc,GAAvB,EAA4B3B,KAAK6B,UAAL,IAAmB,EAA/C,EAAmD7B,KAAKyB,OAAL,CAAaE,GAAb,CAAnD,EAAsEjB,OAAtE,CAAP;AACA,MAFD;AAGA;;AAEDR,SAAKc,QAAL,GAAgB,IAAIc,MAAJ,CAAWhB,KAAKiB,SAAL,CAAelB,UAAUmB,gBAAV,EAAf,CAAX,CAAhB;;AAEAC,YAAQC,GAAR,CAAYV,CAAZ,EAAeW,IAAf,CAAoB,YAAM;AACzB,SAAIjB,oBAAJ,EAA0B;AACzB,aAAOd,GAAG,8BAAgB,gBAAhB,EAAkC,4BAAlC,CAAH,CAAP;AACA,MAFD,MAEO;AACNA,SAAG,IAAH,EAASF,IAAT;AACA;AACD,KAND;AAOA,IAjDM,CAAP;AAkDA","file":"gulpRemapIstanbul.js","sourcesContent":["/* jshint node: true */\n/* jshint -W079 */\nimport remap from './remap';\nimport writeReport from './writeReport';\nimport checkThreshold from './checkThreshold';\nimport MemoryStore from '../utils/node!istanbul/lib/store/memory';\nimport { PluginError } from '../utils/node!gulp-util';\nimport through from '../utils/node!through2';\n\n/* global Promise */\n\nexport default function gulpPlugin(opts = {}) {\n\treturn through.obj((file, enc, cb) => {\n\t\tif (!opts.warn) {\n\t\t\topts.warn = (message) => {\n\t\t\t\tif (opts.fail) {\n\t\t\t\t\tcb(new PluginError('remap-istanbul', message));\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(message);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\topts.sources = new MemoryStore();\n\n\t\tif (file.isNull()) {\n\t\t\tcb(null, file);\n\t\t}\n\n\t\tif (file.isStream()) {\n\t\t\tcb(new PluginError('remap-istanbul', 'Streaming not supported'));\n\t\t}\n\n\t\tconst collector = remap(JSON.parse(file.contents.toString('utf8')), opts);\n\n\t\tlet thresholdCheckFailed = false;\n\t\tif (opts.check) {\t\t\t\t\n\t\t\tthresholdCheckFailed = checkThreshold(opts.check, collector);\n\t\t}\n\n\t\tlet sources;\n\t\tif (Object.keys(opts.sources.map).length) {\n\t\t\tsources = opts.sources;\n\t\t}\n\n\t\tconst p = [];\n\t\tif (opts.reports) {\n\t\t\tObject.keys(opts.reports).forEach((key) => {\n\t\t\t\tp.push(writeReport(collector, key, opts.reportOpts || {}, opts.reports[key], sources));\n\t\t\t});\n\t\t}\n\n\t\tfile.contents = new Buffer(JSON.stringify(collector.getFinalCoverage()));\n\n\t\tPromise.all(p).then(() => {\n\t\t\tif (thresholdCheckFailed) {\n\t\t\t\treturn cb(new PluginError('remap-istanbul', 'Coverage threshold not met'));\t\t\t\t\t\n\t\t\t} else {\n\t\t\t\tcb(null, file);\n\t\t\t}\t\t\t\n\t\t});\n\t});\n};\n"]}