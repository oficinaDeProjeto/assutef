{"version":3,"sources":["../src/writeReport.js"],"names":["writeReport","istanbulReportTypes","clover","cobertura","html","json","lcovonly","teamcity","text","collector","reportType","reportOptions","dest","sources","Promise","resolve","reject","SyntaxError","Reporter","require","options","Object","assign","file","dir","log","console","Error","sourceStore","reporter"],"mappings":";8BAAQ,gB;;;;;;oBA8BgBA,W;;;AA5BxB,MAAMC,sBAAsB;AAC3BC,WAAQ,MADmB;AAE3BC,cAAW,MAFgB;AAG3BC,SAAM,WAHqB;AAI3B,mBAAgB,MAJW;AAK3BC,SAAM,MALqB;AAM3BC,aAAU,MANiB;AAO3BC,aAAU,MAPiB;AAQ3B,gBAAa,SARc;AAS3B,mBAAgB,MATW;AAU3BC,SAAM;AAVqB,GAA5B;;AAaA;;;;;;;;;;;;;;;AAee,WAASR,WAAT,CAAqBS,SAArB,EAAgCC,UAAhC,EAA4CC,aAA5C,EAA2DC,IAA3D,EAAiEC,OAAjE,EAA0E;AACxF,UAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvC,QAAI,EAAEN,cAAcT,mBAAhB,CAAJ,EAA0C;AACzCe,YAAO,IAAIC,WAAJ,mCAAgDP,UAAhD,QAAP;AACA;AACA;AACD,QAAMQ,WAAWC,iCAA+BT,UAA/B,CAAjB;AACA,QAAMU,UAAUC,OAAOC,MAAP,CAAc,EAAd,EAAkBX,aAAlB,CAAhB;AACA,YAAQV,oBAAoBS,UAApB,CAAR;AACC,UAAK,MAAL;AACCU,cAAQG,IAAR,GAAeX,IAAf;AACA;AACD,UAAK,WAAL;AACCQ,cAAQI,GAAR,GAAcZ,IAAd;AACA;AACD,UAAK,SAAL;AACCQ,cAAQK,GAAR,GAAcb,QAAQc,QAAQD,GAA9B;AACA;AACD;AACC,YAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;AAXF;AAaA,QAAId,OAAJ,EAAa;AACZO,aAAQQ,WAAR,GAAsBf,OAAtB;AACA;AACD,QAAMgB,WAAW,IAAIX,QAAJ,CAAaE,OAAb,CAAjB;AACAL,YAAQc,SAAS7B,WAAT,CAAqBS,SAArB,EAAgC,IAAhC,CAAR;AACA,IAzBM,CAAP;AA0BA","file":"writeReport.js","sourcesContent":["require('istanbul/index');\n\nconst istanbulReportTypes = {\n\tclover: 'file',\n\tcobertura: 'file',\n\thtml: 'directory',\n\t'json-summary': 'file',\n\tjson: 'file',\n\tlcovonly: 'file',\n\tteamcity: 'file',\n\t'text-lcov': 'console',\n\t'text-summary': 'file',\n\ttext: 'file',\n};\n\n/**\n * Generates an Instanbul Coverage report based on the information passed.\n * @param  {istanbul/lib/_collector} collector  An instance of an coverage\n *                                             collector\n * @param  {string}          reportType    The name of the report type to\n *                                         generate\n * @param  {object}       reportOptions The options to pass to the reporter\n * @param  {string|function} dest          The filename or outputting\n *                                         function to use for generating\n *                                         the report\n * @param  {istanbul/lib/store} sources?   A store of sources to be passed\n *                                         the reporter\n * @return {Promise}                       A promise that resolves when the\n *                                         report is complete.\n */\nexport default function writeReport(collector, reportType, reportOptions, dest, sources) {\n\treturn new Promise((resolve, reject) => {\n\t\tif (!(reportType in istanbulReportTypes)) {\n\t\t\treject(new SyntaxError(`Unrecognized report type of \"${reportType}\".`));\n\t\t\treturn;\n\t\t}\n\t\tconst Reporter = require(`istanbul/lib/report/${reportType}`);\n\t\tconst options = Object.assign({}, reportOptions);\n\t\tswitch (istanbulReportTypes[reportType]) {\n\t\t\tcase 'file':\n\t\t\t\toptions.file = dest;\n\t\t\t\tbreak;\n\t\t\tcase 'directory':\n\t\t\t\toptions.dir = dest;\n\t\t\t\tbreak;\n\t\t\tcase 'console':\n\t\t\t\toptions.log = dest || console.log;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown reporter type');\n\t\t}\n\t\tif (sources) {\n\t\t\toptions.sourceStore = sources;\n\t\t}\n\t\tconst reporter = new Reporter(options);\n\t\tresolve(reporter.writeReport(collector, true));\n\t});\n};\n"]}