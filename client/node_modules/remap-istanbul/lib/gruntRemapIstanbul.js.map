{"version":3,"sources":["../src/gruntRemapIstanbul.js"],"names":["gruntPlugin","grunt","registerMultiTask","done","async","options","sources","p","warn","message","fail","log","error","files","forEach","file","coverage","src","readJSON","readFile","basePath","useAbsolutePaths","exclude","Object","keys","map","length","undefined","type","dest","push","concat","reports","key","reportOpts","Promise","all","then","fatal"],"mappings":";;;;;;;oBAQwBA,W;;;;;;;;;;;;;;;;AARxB;AACA;;AAOe,WAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC1CA,SAAMC,iBAAN,CAAwB,eAAxB,EAAyC,YAAY;AACpD,QAAMC,OAAO,KAAKC,KAAL,EAAb;AACA,QAAMC,UAAU,KAAKA,OAAL,EAAhB;AACA,QAAIC,UAAU,sBAAd;AACA,QAAIC,IAAI,EAAR;;AAEA,aAASC,IAAT,CAAcC,OAAd,EAAuB;AACtB,SAAIJ,QAAQK,IAAZ,EAAkB;AACjBT,YAAMS,IAAN,CAAWF,IAAX,CAAgBC,OAAhB;AACA,MAFD,MAEO;AACNR,YAAMU,GAAN,CAAUC,KAAV,CAAgBH,OAAhB;AACA;AACD;;AAED,SAAKI,KAAL,CAAWC,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC5B,SAAMC,WAAW,qBAAM,4BAAaD,KAAKE,GAAlB,EAAuB;AAC7CC,gBAAUjB,MAAMiB,QAD6B;AAE7CV;AAF6C,MAAvB,CAAN,EAGb;AACHW,gBAAUlB,MAAMkB,QADb;AAEHD,gBAAUjB,MAAMiB,QAFb;AAGHV,gBAHG;AAIHF,sBAJG;AAKHc,gBAAUL,KAAKK,QALZ;AAMHC,wBAAkBhB,QAAQgB,gBANvB;AAOHC,eAASjB,QAAQiB;AAPd,MAHa,CAAjB;;AAaA,SAAI,CAACC,OAAOC,IAAP,CAAYlB,QAAQmB,GAApB,EAAyBC,MAA9B,EAAsC;AACrCpB,gBAAUqB,SAAV;AACA;;AAED,SAAIZ,KAAKa,IAAL,IAAab,KAAKc,IAAtB,EAA4B;AAC3BtB,QAAEuB,IAAF,CAAO,2BAAYd,QAAZ,EAAsBD,KAAKa,IAA3B,EAAiC,EAAjC,EAAqCb,KAAKc,IAA1C,EAAgDvB,OAAhD,CAAP;AACA,MAFD,MAEO;AACNC,UAAIA,EAAEwB,MAAF,CAASR,OAAOC,IAAP,CAAYnB,QAAQ2B,OAApB,EAA6BP,GAA7B,CAAiC,UAACQ,GAAD;AAAA,cAC7C,2BAAYjB,QAAZ,EAAsBiB,GAAtB,EAA2B5B,QAAQ6B,UAAR,IAAsB,EAAjD,EAAqD7B,QAAQ2B,OAAR,CAAgBC,GAAhB,CAArD,EAA2E3B,OAA3E,CAD6C;AAAA,OAAjC,CAAT,CAAJ;AAGA;AACD,KAzBD;;AA2BA6B,YAAQC,GAAR,CAAY7B,CAAZ,EAAe8B,IAAf,CAAoB,YAAM;AACzBlC;AACA,KAFD,EAEGF,MAAMS,IAAN,CAAW4B,KAFd;AAGA,IA5CD;AA6CA","file":"gruntRemapIstanbul.js","sourcesContent":["/* jshint node: true */\n/* global Promise */\n\nimport loadCoverage from './loadCoverage';\nimport remap from './remap';\nimport writeReport from './writeReport';\nimport MemoryStore from '../utils/node!istanbul/lib/store/memory';\n\nexport default function gruntPlugin(grunt) {\n\tgrunt.registerMultiTask('remapIstanbul', function () {\n\t\tconst done = this.async();\n\t\tconst options = this.options();\n\t\tlet sources = new MemoryStore();\n\t\tlet p = [];\n\n\t\tfunction warn(message) {\n\t\t\tif (options.fail) {\n\t\t\t\tgrunt.fail.warn(message);\n\t\t\t} else {\n\t\t\t\tgrunt.log.error(message);\n\t\t\t}\n\t\t}\n\n\t\tthis.files.forEach((file) => {\n\t\t\tconst coverage = remap(loadCoverage(file.src, {\n\t\t\t\treadJSON: grunt.readJSON,\n\t\t\t\twarn,\n\t\t\t}), {\n\t\t\t\treadFile: grunt.readFile,\n\t\t\t\treadJSON: grunt.readJSON,\n\t\t\t\twarn,\n\t\t\t\tsources,\n\t\t\t\tbasePath: file.basePath,\n\t\t\t\tuseAbsolutePaths: options.useAbsolutePaths,\n\t\t\t\texclude: options.exclude,\n\t\t\t});\n\n\t\t\tif (!Object.keys(sources.map).length) {\n\t\t\t\tsources = undefined;\n\t\t\t}\n\n\t\t\tif (file.type && file.dest) {\n\t\t\t\tp.push(writeReport(coverage, file.type, {}, file.dest, sources));\n\t\t\t} else {\n\t\t\t\tp = p.concat(Object.keys(options.reports).map((key) =>\n\t\t\t\t\twriteReport(coverage, key, options.reportOpts || {}, options.reports[key], sources)\n\t\t\t\t));\n\t\t\t}\n\t\t});\n\n\t\tPromise.all(p).then(() => {\n\t\t\tdone();\n\t\t}, grunt.fail.fatal);\n\t});\n};\n"]}