{"version":3,"sources":["../src/loadCoverage.js"],"names":["loadCoverage","sources","options","warn","console","readJSON","filePath","existsSync","Error","JSON","parse","readFileSync","length","SyntaxError","collector","forEach","add","getFinalCoverage"],"mappings":";;;;;;;oBAWwBA,Y;;;;;;;;;;AATxB;;;;;;;;;AASe,WAASA,YAAT,CAAsBC,OAAtB,EAA6C;AAAA,OAAdC,OAAc,uEAAJ,EAAI;;AAC3D,OAAMC,OAAOD,QAAQC,IAAR,IAAgBC,QAAQD,IAArC;;AAEA,OAAME,WAAWH,QAAQG,QAAR,IACb,UAAUC,QAAV,EAAoB;AACtB,QAAI,CAAC,aAAGC,UAAH,CAAcD,QAAd,CAAL,EAA8B;AAC7BH,UAAK,IAAIK,KAAJ,yBAAgCF,QAAhC,OAAL;AACA,YAAO,EAAP;AACA;AACD,WAAOG,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgBL,QAAhB,CAAX,CAAP;AACA,IAPF;;AASA,OAAI,OAAOL,OAAP,KAAmB,QAAvB,EAAiC;AAChCA,cAAU,CAACA,OAAD,CAAV;AACA;AACD,OAAI,CAACA,QAAQW,MAAb,EAAqB;AACpBT,SAAK,IAAIU,WAAJ,CAAgB,6BAAhB,CAAL;AACA;AACD,OAAMC,YAAY,6BAAlB;AACAb,WAAQc,OAAR,CAAgB,UAACT,QAAD,EAAc;AAC7BQ,cAAUE,GAAV,CAAcX,SAASC,QAAT,CAAd;AACA,IAFD;;AAIA,UAAOQ,UAAUG,gBAAV,EAAP;AACA","file":"loadCoverage.js","sourcesContent":["import { Collector } from '../utils/node!istanbul';\nimport fs from 'fs';\n/**\n * Takes sources of coverage information and adds them to a collector which then can be subsequently\n * remapped.\n * @param  {Array|string}           sources  The source(s) of the JSON coverage information\n * @param  {Object}                 options? A hash of options that can be set:\n *                                               readJSON?: A function that can read and parse a JSON file\n *                                               warn?: A function that logs warning messages\n * @return {Object}                          The loaded coverage object\n */\nexport default function loadCoverage(sources, options = {}) {\n\tconst warn = options.warn || console.warn;\n\n\tconst readJSON = options.readJSON\n\t\t|| function (filePath) {\n\t\t\tif (!fs.existsSync(filePath)) {\n\t\t\t\twarn(new Error(`Cannot find file: \"${filePath}\"`));\n\t\t\t\treturn {};\n\t\t\t}\n\t\t\treturn JSON.parse(fs.readFileSync(filePath));\n\t\t};\n\n\tif (typeof sources === 'string') {\n\t\tsources = [sources];\n\t}\n\tif (!sources.length) {\n\t\twarn(new SyntaxError('No coverage files supplied!'));\n\t}\n\tconst collector = new Collector();\n\tsources.forEach((filePath) => {\n\t\tcollector.add(readJSON(filePath));\n\t});\n\n\treturn collector.getFinalCoverage();\n};\n"]}